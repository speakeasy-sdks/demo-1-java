/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package demo_1.test_1.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WebhookRequest - Webhook is a special type of a Job, it performs a HTTPS request to a specified URL with specified headers.
 */
public class WebhookRequest {
    /**
     * Defines whether this job is currently disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;

    public WebhookRequest withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    public java.util.Map<String, Object> headers;

    public WebhookRequest withHeaders(java.util.Map<String, Object> headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * Job ID, unique within the Organization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public WebhookRequest withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payload")
    public java.util.Map<String, Object> payload;

    public WebhookRequest withPayload(java.util.Map<String, Object> payload) {
        this.payload = payload;
        return this;
    }
    
    /**
     * A list of Events by which the Job is triggered
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggers")
    public EventBaseRequest[] triggers;

    public WebhookRequest withTriggers(EventBaseRequest[] triggers) {
        this.triggers = triggers;
        return this;
    }
    
    /**
     * Thw webhook's URL (without protocol, only HTTPS is supported)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public WebhookRequest withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public WebhookRequest(){}
}
