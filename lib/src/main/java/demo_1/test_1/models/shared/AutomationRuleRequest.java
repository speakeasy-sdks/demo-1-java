/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package demo_1.test_1.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AutomationRuleRequest - An Automation Rule defining how and when artefacts in an environment should be updated.
 */
public class AutomationRuleRequest {
    /**
     * Whether the rule will be processed or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;

    public AutomationRuleRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artefacts_filter")
    public String[] artefactsFilter;

    public AutomationRuleRequest withArtefactsFilter(String[] artefactsFilter) {
        this.artefactsFilter = artefactsFilter;
        return this;
    }
    
    /**
     * Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_artefacts_filter")
    public Boolean excludeArtefactsFilter;

    public AutomationRuleRequest withExcludeArtefactsFilter(Boolean excludeArtefactsFilter) {
        this.excludeArtefactsFilter = excludeArtefactsFilter;
        return this;
    }
    
    /**
     * DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_images_filter")
    public Boolean excludeImagesFilter;

    public AutomationRuleRequest withExcludeImagesFilter(Boolean excludeImagesFilter) {
        this.excludeImagesFilter = excludeImagesFilter;
        return this;
    }
    
    /**
     * DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images_filter")
    public String[] imagesFilter;

    public AutomationRuleRequest withImagesFilter(String[] imagesFilter) {
        this.imagesFilter = imagesFilter;
        return this;
    }
    
    /**
     * DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("match")
    public String match;

    public AutomationRuleRequest withMatch(String match) {
        this.match = match;
        return this;
    }
    
    /**
     * A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("match_ref")
    public String matchRef;

    public AutomationRuleRequest withMatchRef(String matchRef) {
        this.matchRef = matchRef;
        return this;
    }
    
    /**
     * Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `"update"`.
     */
    @JsonProperty("type")
    public String type;

    public AutomationRuleRequest withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `"branch"` or `"tag"`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_to")
    public String updateTo;

    public AutomationRuleRequest withUpdateTo(String updateTo) {
        this.updateTo = updateTo;
        return this;
    }
    
    public AutomationRuleRequest(@JsonProperty("type") String type) {
        this.type = type;
  }
}
