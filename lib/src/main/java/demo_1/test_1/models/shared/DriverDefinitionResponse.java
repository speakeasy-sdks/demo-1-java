/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package demo_1.test_1.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DriverDefinitionResponse - DriverDefinition describes the resource driver.
 * 
 * Resource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.
 */
public class DriverDefinitionResponse {
    /**
     * List of resources accounts types supported by the driver
     */
    @JsonProperty("account_types")
    public String[] accountTypes;

    public DriverDefinitionResponse withAccountTypes(String[] accountTypes) {
        this.accountTypes = accountTypes;
        return this;
    }
    
    /**
     * The ID for this driver. Is used as `driver_type`.
     */
    @JsonProperty("id")
    public String id;

    public DriverDefinitionResponse withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * A JSON Schema specifying the driver-specific input parameters.
     */
    @JsonProperty("inputs_schema")
    public java.util.Map<String, Object> inputsSchema;

    public DriverDefinitionResponse withInputsSchema(java.util.Map<String, Object> inputsSchema) {
        this.inputsSchema = inputsSchema;
        return this;
    }
    
    /**
     * Defines whether this driver is accessible to all Organizations.
     */
    @JsonProperty("is_public")
    public Boolean isPublic;

    public DriverDefinitionResponse withIsPublic(Boolean isPublic) {
        this.isPublic = isPublic;
        return this;
    }
    
    /**
     * The Organization this driver exists under. Useful as public drivers are accessible to other orgs.
     */
    @JsonProperty("org_id")
    public String orgId;

    public DriverDefinitionResponse withOrgId(String orgId) {
        this.orgId = orgId;
        return this;
    }
    
    /**
     * The prefix where the driver resides or, if the driver is a virtual driver, the reference to an existing driver using the `driver://` schema of the format `driver://{orgId}/{driverId}`. Only members of the organization the driver belongs to can see `target`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    public String target;

    public DriverDefinitionResponse withTarget(String target) {
        this.target = target;
        return this;
    }
    
    /**
     * If the driver is a virtual driver, template defines a Go template that converts the driver inputs supplied in the resource definition into the driver inputs for the target driver.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    public Object template;

    public DriverDefinitionResponse withTemplate(Object template) {
        this.template = template;
        return this;
    }
    
    /**
     * The type of resource produced by this driver
     */
    @JsonProperty("type")
    public String type;

    public DriverDefinitionResponse withType(String type) {
        this.type = type;
        return this;
    }
    
    public DriverDefinitionResponse(@JsonProperty("account_types") String[] accountTypes, @JsonProperty("id") String id, @JsonProperty("inputs_schema") java.util.Map<String, Object> inputsSchema, @JsonProperty("is_public") Boolean isPublic, @JsonProperty("org_id") String orgId, @JsonProperty("type") String type) {
        this.accountTypes = accountTypes;
        this.id = id;
        this.inputsSchema = inputsSchema;
        this.isPublic = isPublic;
        this.orgId = orgId;
        this.type = type;
  }
}
